@using Watch.Manager.Web.Services.Models

<tr class="category-row @(this.IsChild ? "child-row" : "parent-row") @(this.IsExpanded ? "expanded" : "")">
    <td style="width: 40px;">
        @if (this.Category.Children.Any())
        {
            <FluentButton Appearance="Appearance.Stealth"
                        IconOnly="true"
                        @onclick="this.OnToggleExpanded"
                        Title="@(this.IsExpanded ? "Réduire" : "Développer")"
                        Style="@($"margin-left: {(this.IsChild ? 16 : 0)}px")">
                @if (this.IsExpanded)
                {
                    <FluentIcon Value="@(new Size16.ChevronDown())" />
                }
                else
                {
                    <FluentIcon Value="@(new Size16.ChevronRight())" />
                }
            </FluentButton>
        }
        else if (this.GetIndentationLevel() > 0)
        {
            <div style="@($"margin-left: {(this.GetIndentationLevel() * 16)}px"); width: 20px;"></div>
        }
    </td>

    <td>
        <div class="category-name-cell" style="@($"margin-left: {(this.GetIndentationLevel() * 16)}px")">
            <span class="category-icon">@(string.IsNullOrEmpty(this.Category.Icon) ? "📁" : this.Category.Icon)</span>
            <div class="category-info">
                <div class="name-with-path">
                    @if (!string.IsNullOrEmpty(this.Category.HierarchyPath) && this.Category.HierarchyPath != this.Category.Name)
                    {
                        <span class="hierarchy-path">@(this.Category.HierarchyPath.Replace(this.Category.Name, "").TrimEnd('/'))/</span>
                    }
                    <strong>@(this.Category.Name)</strong>
                </div>
                @if (!string.IsNullOrEmpty(this.Category.Description))
                {
                    <div class="category-description">@(this.Category.Description)</div>
                }
            </div>
        </div>
    </td>

    <td>
        @if (!string.IsNullOrEmpty(this.Category.ParentName))
        {
            <span class="parent-name">@(this.Category.ParentName)</span>
        }
        else
        {
            <span class="no-parent">—</span>
        }
    </td>

    <td style="text-align: center;">
        <FluentBadge Appearance="Appearance.Neutral">
            @(this.Category.ArticleCount)
        </FluentBadge>
    </td>

    <td>
        <div class="keywords-cell">
            @if (this.Category.Keywords.Any())
            {
                @foreach (var keyword in this.Category.Keywords.Take(3))
                {
                    <FluentBadge Appearance="Appearance.Lightweight" Size="BadgeSize.Small">
                        @keyword
                    </FluentBadge>
                }
                @if (this.Category.Keywords.Length > 3)
                {
                    <FluentBadge Appearance="Appearance.Lightweight" Size="BadgeSize.Small">
                        +@(this.Category.Keywords.Length - 3)
                    </FluentBadge>
                }
            }
            else
            {
                <span class="no-keywords">—</span>
            }
        </div>
    </td>

    <td style="text-align: center;">
        @if (this.Category.IsActive)
        {
            <FluentBadge Appearance="Appearance.Accent" BackgroundColor="green">
                Actif
            </FluentBadge>
        }
        else
        {
            <FluentBadge Appearance="Appearance.Neutral">
                Inactif
            </FluentBadge>
        }
    </td>

    <td style="text-align: center;">
        <span class="date-cell">@(this.Category.CreatedAt.ToString("dd/MM/yyyy"))</span>
    </td>

    <td>
        <div class="action-buttons">
            <FluentButton Appearance="Appearance.Stealth"
                        IconOnly="true"
                        @onclick="() => this.OnCategoryEdit.InvokeAsync(this.Category)"
                        Title="Modifier">
                <FluentIcon Value="@(new Size16.Edit())" />
            </FluentButton>
            <FluentButton Appearance="Appearance.Stealth"
                        IconOnly="true"
                        @onclick="() => this.OnCategoryDelete.InvokeAsync(this.Category)"
                        Title="Supprimer">
                <FluentIcon Value="@(new Size16.Delete())" />
            </FluentButton>
        </div>
    </td>
</tr>

<style>
    .category-row {
        border-bottom: 1px solid var(--neutral-stroke-divider-rest);
        transition: background-color 0.2s ease;
    }

    .category-row:hover {
        background-color: var(--neutral-layer-2);
    }

    .category-row td {
        padding: 8px 12px;
        vertical-align: top;
    }

    .child-row {
        background-color: var(--neutral-layer-card-rest);
    }

    .child-row td:first-child {
        border-left: 3px solid var(--accent-fill-rest);
    }

    .category-name-cell {
        display: flex;
        align-items: flex-start;
        gap: 8px;
    }

    .category-icon {
        font-size: 16px;
        width: 20px;
        text-align: center;
        margin-top: 2px;
    }

    .category-info {
        flex: 1;
        min-width: 0;
    }

    .name-with-path {
        margin-bottom: 4px;
    }

    .hierarchy-path {
        color: var(--neutral-foreground-rest);
        font-size: 0.85em;
        opacity: 0.8;
    }

    .category-description {
        font-size: 0.85em;
        color: var(--neutral-foreground-rest);
        line-height: 1.3;
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .parent-name {
        color: var(--neutral-foreground-rest);
        font-style: italic;
    }

    .no-parent, .no-keywords {
        color: var(--neutral-foreground-disabled);
        font-style: italic;
    }

    .keywords-cell {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        max-width: 200px;
    }

    .action-buttons {
        display: flex;
        gap: 4px;
        justify-content: center;
    }

    .date-cell {
        font-size: 0.9em;
        color: var(--neutral-foreground-rest);
    }
</style>

@code {
    [Parameter] public CategoryModel Category { get; set; } = null!;
    [Parameter] public bool IsChild { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback OnToggleExpanded { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnCategoryEdit { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnCategoryDelete { get; set; }

    private int GetIndentationLevel()
    {
        return this.Category.HierarchyLevel;
    }
}
