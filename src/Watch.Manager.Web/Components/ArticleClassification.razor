@using Watch.Manager.Web.Services.Models
@using Watch.Manager.Web.Services
@using Watch.Manager.Common
@inject AnalyzeService AnalyzeService
@inject IToastService ToastService

<div class="article-classification">
    <div class="classification-header">
        <span class="classification-icon">ü§ñ</span>
        <span class="classification-title">Classification IA</span>
        @if (this.IsClassifying)
        {
            <FluentProgressRing Size="16px" />
        }
        else
        {
            <FluentButton Appearance="Appearance.Stealth"
                         @onclick="this.ClassifyArticleAsync"
                         Title="Reclassifier l'article">
                üîÑ
            </FluentButton>
        }
    </div>

    @if (this.Suggestions?.Any() == true)
    {
        <div class="suggestions-section">
            <h4>Cat√©gories sugg√©r√©es:</h4>
            @foreach (var suggestion in this.Suggestions.OrderByDescending(s => s.ConfidenceScore))
            {
                <div class="suggestion-item @(suggestion.IsAutoAssigned ? "auto-assigned" : "")">
                    <FluentBadge Appearance="@GetBadgeAppearance(suggestion.ConfidenceScore)"
                                Circular="false"
                                Class="confidence-badge">
                        @($"{suggestion.ConfidenceScore:P0}")
                    </FluentBadge>

                    <span class="category-name">@suggestion.CategoryName</span>

                    @if (!suggestion.IsAutoAssigned)
                    {
                        <FluentButton Appearance="Appearance.Stealth"
                                     @onclick="() => this.AssignCategoryAsync(suggestion.CategoryId)"
                                     Title="Assigner cette cat√©gorie">
                            ‚ûï
                        </FluentButton>
                    }
                    else
                    {
                        <span class="success-icon" title="Assign√© automatiquement">‚úÖ</span>
                    }

                    @if (!string.IsNullOrEmpty(suggestion.Reason))
                    {
                        <span class="info-icon" title="@suggestion.Reason">‚ÑπÔ∏è</span>
                    }
                </div>
            }
        </div>
    }

    @if (this.NewCategorySuggestions?.Any() == true)
    {
        <div class="new-category-suggestions">
            <h4>Nouvelles cat√©gories sugg√©r√©es:</h4>
            @foreach (var newCat in this.NewCategorySuggestions)
            {
                <div class="new-category-item">
                    <FluentBadge Appearance="@GetBadgeAppearance(newCat.ConfidenceScore)"
                                Circular="false"
                                Class="confidence-badge">
                        @($"{newCat.ConfidenceScore:P0}")
                    </FluentBadge>

                    <span class="new-category-name">@newCat.SuggestedName</span>

                    <FluentButton Appearance="Appearance.Stealth"
                                 @onclick="() => this.CreateAndAssignCategoryAsync(newCat)"
                                 Title="Cr√©er cette cat√©gorie">
                        ‚ûï
                    </FluentButton>

                    @if (!string.IsNullOrEmpty(newCat.Reason))
                    {
                        <span class="info-icon" title="@newCat.Reason">‚ÑπÔ∏è</span>
                    }
                </div>
            }
        </div>
    }

    @if (this.HasClassified && !this.Suggestions?.Any() == true)
    {
        <div class="no-suggestions">
            <span>‚ùì Aucune cat√©gorie correspondante trouv√©e.</span>
            <FluentButton Appearance="Appearance.Accent"
                         @onclick="this.SuggestNewCategoriesAsync"
                         Disabled="this.IsLoadingNewSuggestions">
                @if (this.IsLoadingNewSuggestions)
                {
                    <FluentProgressRing Size="16px" />
                }
                else
                {
                    <span>Sugg√©rer de nouvelles cat√©gories</span>
                }
            </FluentButton>
        </div>
    }
</div>

<style>
    .article-classification {
        border: 1px solid var(--neutral-stroke-divider-rest);
        border-radius: var(--control-corner-radius);
        padding: 12px;
        margin: 8px 0;
        background: var(--neutral-layer-1);
    }

    .classification-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
        font-weight: 600;
    }

    .classification-icon {
        font-size: 18px;
    }

    .classification-title {
        flex-grow: 1;
    }

    .suggestions-section, .new-category-suggestions {
        margin-bottom: 12px;
    }

    .suggestion-item, .new-category-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 0;
        border-bottom: 1px solid var(--neutral-stroke-divider-rest);
    }

    .suggestion-item:last-child, .new-category-item:last-child {
        border-bottom: none;
    }

    .auto-assigned {
        background-color: var(--accent-fill-rest);
        border-radius: 4px;
        padding: 4px 8px;
        opacity: 0.8;
    }

    .confidence-badge {
        min-width: 45px;
        text-align: center;
    }

    .category-name, .new-category-name {
        flex-grow: 1;
        font-weight: 500;
    }

    .new-category-name {
        font-style: italic;
        color: var(--accent-foreground-rest);
    }

    .success-icon, .info-icon {
        cursor: help;
    }

    .no-suggestions {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        background: var(--neutral-layer-2);
        border-radius: 4px;
        font-style: italic;
        color: var(--neutral-foreground-hint);
    }
</style>

@code {
    [Parameter] public int ArticleId { get; set; }
    [Parameter] public EventCallback OnCategoryAssigned { get; set; }

    private bool IsClassifying { get; set; }
    private bool IsLoadingNewSuggestions { get; set; }
    private bool HasClassified { get; set; }
    private CategorySuggestionModel[]? Suggestions { get; set; }
    private NewCategorySuggestionModel[]? NewCategorySuggestions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.ClassifyArticleAsync();
    }

    private async Task ClassifyArticleAsync()
    {
        if (this.IsClassifying) return;

        this.IsClassifying = true;
        this.HasClassified = false;
        this.StateHasChanged();

        try
        {
            var result = await this.AnalyzeService.ClassifyArticleAsync(this.ArticleId);
            if (result.ApiResultErrorType == ApiResultErrorType.None || result.ApiResultErrorType == null)
            {
                this.Suggestions = result.Result;
                this.HasClassified = true;
            }
            else
            {
                this.ToastService.ShowError($"Erreur lors de la classification: {result.Error ?? result.ApiResultErrorType?.ToString()}");
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowError($"Erreur inattendue: {ex.Message}");
        }
        finally
        {
            this.IsClassifying = false;
            this.StateHasChanged();
        }
    }

    private async Task AssignCategoryAsync(int categoryId)
    {
        try
        {
            var result = await this.AnalyzeService.AssignCategoryToArticleAsync(categoryId, this.ArticleId);
            if (result.ApiResultErrorType == ApiResultErrorType.None || result.ApiResultErrorType == null)
            {
                this.ToastService.ShowSuccess("Cat√©gorie assign√©e avec succ√®s");

                // Marquer la suggestion comme assign√©e
                if (this.Suggestions != null)
                {
                    var suggestion = this.Suggestions.FirstOrDefault(s => s.CategoryId == categoryId);
                    if (suggestion != null)
                    {
                        suggestion.IsAutoAssigned = true;
                    }
                }

                await this.OnCategoryAssigned.InvokeAsync();
                this.StateHasChanged();
            }
            else
            {
                this.ToastService.ShowError($"Erreur lors de l'assignation: {result.Error ?? result.ApiResultErrorType?.ToString()}");
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowError($"Erreur inattendue: {ex.Message}");
        }
    }

    private async Task SuggestNewCategoriesAsync()
    {
        if (this.IsLoadingNewSuggestions) return;

        this.IsLoadingNewSuggestions = true;
        this.StateHasChanged();

        try
        {
            var result = await this.AnalyzeService.SuggestNewCategoriesAsync(this.ArticleId);
            if (result.ApiResultErrorType == ApiResultErrorType.None || result.ApiResultErrorType == null)
            {
                this.NewCategorySuggestions = result.Result;
            }
            else
            {
                this.ToastService.ShowError($"Erreur lors de la suggestion: {result.Error ?? result.ApiResultErrorType?.ToString()}");
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowError($"Erreur inattendue: {ex.Message}");
        }
        finally
        {
            this.IsLoadingNewSuggestions = false;
            this.StateHasChanged();
        }
    }

    private async Task CreateAndAssignCategoryAsync(NewCategorySuggestionModel suggestion)
    {
        try
        {
            // Cr√©er la nouvelle cat√©gorie
            var createResult = await this.AnalyzeService.CreateCategoryAsync(
                suggestion.SuggestedName,
                suggestion.SuggestedDescription,
                suggestion.SuggestedColor,
                suggestion.SuggestedIcon,
                suggestion.SuggestedKeywords,
                suggestion.SuggestedParentId);

            if (createResult.ApiResultErrorType == ApiResultErrorType.None || createResult.ApiResultErrorType == null)
            {
                this.ToastService.ShowSuccess($"Cat√©gorie '{suggestion.SuggestedName}' cr√©√©e avec succ√®s");

                // Assigner la nouvelle cat√©gorie √† l'article
                var assignResult = await this.AnalyzeService.AssignCategoryToArticleAsync(createResult.Result!.Id, this.ArticleId);
                if (assignResult.ApiResultErrorType == ApiResultErrorType.None || assignResult.ApiResultErrorType == null)
                {
                    this.ToastService.ShowSuccess("Cat√©gorie assign√©e √† l'article");
                    await this.OnCategoryAssigned.InvokeAsync();

                    // Retirer la suggestion de la liste
                    this.NewCategorySuggestions = this.NewCategorySuggestions?.Where(s => s != suggestion).ToArray();
                    this.StateHasChanged();
                }
                else
                {
                    this.ToastService.ShowWarning("Cat√©gorie cr√©√©e mais √©chec de l'assignation");
                }
            }
            else
            {
                this.ToastService.ShowError($"Erreur lors de la cr√©ation: {createResult.Error ?? createResult.ApiResultErrorType?.ToString()}");
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowError($"Erreur inattendue: {ex.Message}");
        }
    }

    private static Appearance GetBadgeAppearance(double confidence)
    {
        return confidence switch
        {
            >= 0.8 => Appearance.Accent,
            >= 0.6 => Appearance.Neutral,
            _ => Appearance.Lightweight,
        };
    }
}
