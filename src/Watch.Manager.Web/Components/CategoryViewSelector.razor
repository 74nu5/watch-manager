@using Watch.Manager.Web.Services.Models

<div class="category-view-selector">
    <div class="view-header">
        <div class="view-controls">
            <h3>Organisation des catégories</h3>

            <div class="view-actions">
                <div class="view-selector">
                    <FluentButton Appearance="@(this.CurrentView == CategoryViewType.Grid ? Appearance.Accent : Appearance.Stealth)"
                                @onclick="() => this.SetCurrentView(CategoryViewType.Grid)"
                                Title="Vue en grille">
                        <FluentIcon Value="@(new Size16.GridKanban())" />
                        Grille
                    </FluentButton>

                    <FluentButton Appearance="@(this.CurrentView == CategoryViewType.List ? Appearance.Accent : Appearance.Stealth)"
                                @onclick="() => this.SetCurrentView(CategoryViewType.List)"
                                Title="Vue en liste">
                        <FluentIcon Value="@(new Size16.List())" />
                        Liste
                    </FluentButton>

                    <FluentButton Appearance="@(this.CurrentView == CategoryViewType.Tree ? Appearance.Accent : Appearance.Stealth)"
                                @onclick="() => this.SetCurrentView(CategoryViewType.Tree)"
                                Title="Vue arborescente">
                        <FluentIcon Value="@(new Size16.Flow())" />
                        Arbre
                    </FluentButton>
                </div>

                <FluentButton Appearance="Appearance.Accent"
                            @onclick="this.OnAddCategory">
                    <FluentIcon Value="@(new Size16.Add())" Slot="start" />
                    Nouvelle catégorie
                </FluentButton>
            </div>
        </div>

        @if (this.CurrentView == CategoryViewType.Tree || this.CurrentView == CategoryViewType.List)
        {
            <div class="hierarchy-controls">
                <FluentButton Appearance="Appearance.Stealth"
                            @onclick="this.ExpandAll"
                            Title="Tout développer">
                    <FluentIcon Value="@(new Size16.ChevronDoubleDown())" />
                    Tout développer
                </FluentButton>

                <FluentButton Appearance="Appearance.Stealth"
                            @onclick="this.CollapseAll"
                            Title="Tout réduire">
                    <FluentIcon Value="@(new Size16.ChevronDoubleUp())" />
                    Tout réduire
                </FluentButton>
            </div>
        }
    </div>

    <div class="view-content">
        @switch (this.CurrentView)
        {
            case CategoryViewType.Grid:
                <div class="grid-view">
                    @if (this.Categories?.Any() == true)
                    {
                        <div class="category-grid">
                            @foreach (var category in this.Categories)
                            {
                                <CategoryCard Category="category"
                                            OnEdit="this.OnCategoryEdit"
                                            OnDelete="this.OnCategoryDelete" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <p>Aucune catégorie trouvée</p>
                        </div>
                    }
                </div>
                break;

            case CategoryViewType.List:
                <CategoryListView Categories="@this.Categories"
                                OnCategoryEdit="this.OnCategoryEdit"
                                OnCategoryDelete="this.OnCategoryDelete"
                                ExpandedCategories="this.ExpandedCategories"
                                OnToggleExpanded="this.OnToggleExpanded" />
                break;

            case CategoryViewType.Tree:
                <CategoryTreeView Categories="@this.Categories"
                                OnCategoryEdit="this.OnCategoryEdit"
                                OnCategoryDelete="this.OnCategoryDelete"
                                ExpandedCategories="this.ExpandedCategories"
                                OnToggleExpanded="this.OnToggleExpanded" />
                break;
        }
    </div>
</div>

<style>
    .category-view-selector {
        width: 100%;
        background-color: var(--neutral-layer-1);
        border-radius: 8px;
        overflow: hidden;
    }

    .view-header {
        padding: 16px 20px;
        background-color: var(--neutral-layer-2);
        border-bottom: 1px solid var(--neutral-stroke-divider-rest);
    }

    .view-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .view-controls h3 {
        margin: 0;
        color: var(--neutral-foreground-rest);
        font-weight: 600;
    }

    .view-actions {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .view-selector {
        display: flex;
        gap: 4px;
        border: 1px solid var(--neutral-stroke-divider-rest);
        border-radius: 6px;
        padding: 2px;
        background-color: var(--neutral-layer-1);
    }

    .hierarchy-controls {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .view-content {
        padding: 20px;
    }

    .grid-view {
        width: 100%;
    }

    .category-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 16px;
        width: 100%;
    }

    .empty-state {
        text-align: center;
        padding: 40px;
        color: var(--neutral-foreground-rest);
    }
</style>

@code {
    [Parameter] public IEnumerable<CategoryModel>? Categories { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnCategoryEdit { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnCategoryDelete { get; set; }
    [Parameter] public EventCallback OnAddCategory { get; set; }
    [Parameter] public CategoryViewType InitialView { get; set; } = CategoryViewType.Grid;

    private CategoryViewType currentView;
    private HashSet<int> expandedCategories = new();

    public CategoryViewType CurrentView
    {
        get => this.currentView;
        set
        {
            if (this.currentView != value)
            {
                this.currentView = value;
                this.StateHasChanged();
            }
        }
    }

    public HashSet<int> ExpandedCategories => this.expandedCategories;

    protected override void OnInitialized()
    {
        this.currentView = this.InitialView;
    }

    private void SetCurrentView(CategoryViewType viewType)
    {
        this.CurrentView = viewType;
    }

    private async Task OnToggleExpanded(int categoryId)
    {
        if (this.expandedCategories.Contains(categoryId))
        {
            this.expandedCategories.Remove(categoryId);
        }
        else
        {
            this.expandedCategories.Add(categoryId);
        }

        this.StateHasChanged();
        await Task.CompletedTask;
    }

    private void ExpandAll()
    {
        if (this.Categories?.Any() == true)
        {
            this.expandedCategories.Clear();
            this.AddAllCategoryIds(this.Categories);
            this.StateHasChanged();
        }
    }

    private void CollapseAll()
    {
        this.expandedCategories.Clear();
        this.StateHasChanged();
    }

    private void AddAllCategoryIds(IEnumerable<CategoryModel> categories)
    {
        foreach (var category in categories)
        {
            this.expandedCategories.Add(category.Id);
            if (category.Children.Count > 0)
            {
                this.AddAllCategoryIds(category.Children);
            }
        }
    }
}
