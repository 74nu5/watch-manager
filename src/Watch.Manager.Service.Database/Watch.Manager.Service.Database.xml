<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Watch.Manager.Service.Database</name>
    </assembly>
    <members>
        <member name="T:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore">
            <summary>
                Interface for storing and retrieving analyzed articles and related data.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore.StoreArticleAnalyzeAsync(Watch.Manager.Service.Database.Entities.Article,System.Threading.CancellationToken)">
            <summary>
                Stores an analyzed article asynchronously.
            </summary>
            <param name="analyzeModel">The analyzed article model to store.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore.SearchArticleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Searches for articles asynchronously based on search terms and tag.
            </summary>
            <param name="searchTerms">The search terms to filter articles, or null to ignore.</param>
            <param name="tag">The tag to filter articles, or null to ignore.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>An asynchronous stream of article result DTOs matching the criteria.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore.IsArticleExistsAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Checks asynchronously if an article exists by its URL.
            </summary>
            <param name="url">The URL of the article to check.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that returns true if the article exists, otherwise false.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore.GetAllTagsAsync(System.Threading.CancellationToken)">
            <summary>
                Retrieves all tags used in articles asynchronously.
            </summary>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that returns an array of all tags.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.IArticleAnalyseStore.GetThumbnailAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves the thumbnail image for a given article asynchronously.
            </summary>
            <param name="id">The unique identifier of the article.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>
                A value task that returns a tuple containing the thumbnail as a memory stream and the file name (if available).
            </returns>
        </member>
        <member name="T:Watch.Manager.Service.Database.Abstractions.ICategoryStore">
            <summary>
            Interface pour la gestion des catégories.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetAllCategoriesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Récupère toutes les catégories.
            </summary>
            <param name="includeInactive">Inclut les catégories inactives.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des catégories.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetCategoryByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Récupère une catégorie par son identifiant.
            </summary>
            <param name="id">Identifiant de la catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>La catégorie ou null si non trouvée.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.CreateCategoryAsync(Watch.Manager.Service.Database.Entities.Category,System.Threading.CancellationToken)">
            <summary>
            Crée une nouvelle catégorie.
            </summary>
            <param name="category">La catégorie à créer.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>La catégorie créée.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.UpdateCategoryAsync(Watch.Manager.Service.Database.Entities.Category,System.Threading.CancellationToken)">
            <summary>
            Met à jour une catégorie existante.
            </summary>
            <param name="category">La catégorie à mettre à jour.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>La catégorie mise à jour.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.DeleteCategoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Supprime une catégorie.
            </summary>
            <param name="id">Identifiant de la catégorie à supprimer.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True si la suppression a réussi.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetRootCategoriesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Récupère les catégories racines (sans parent).
            </summary>
            <param name="includeInactive">Inclut les catégories inactives.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des catégories racines avec leurs enfants.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.CategoryExistsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Vérifie si une catégorie existe.
            </summary>
            <param name="id">Identifiant de la catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True si la catégorie existe.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.CategoryNameExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Vérifie si un nom de catégorie existe déjà.
            </summary>
            <param name="name">Nom de la catégorie.</param>
            <param name="excludeId">Identifiant à exclure de la vérification.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True si le nom existe déjà.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.AssignCategoryToArticleAsync(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Assigne une catégorie à un article.
            </summary>
            <param name="articleId">Identifiant de l'article.</param>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="isManual">Indique si l'assignation est manuelle.</param>
            <param name="confidenceScore">Score de confiance pour les assignations automatiques.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True si l'assignation a réussi.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.RemoveCategoryFromArticleAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retire une catégorie d'un article.
            </summary>
            <param name="articleId">Identifiant de l'article.</param>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True si la suppression a réussi.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetArticleCategoriesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Récupère les catégories d'un article.
            </summary>
            <param name="articleId">Identifiant de l'article.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des catégories de l'article.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetArticleCountInCategoryAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Compte le nombre d'articles dans une catégorie.
            </summary>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="includeChildren">Inclut les articles des sous-catégories.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Nombre d'articles.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetLinkedArticleTitlesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Récupère les titres des articles liés à une catégorie.
            </summary>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des titres d'articles.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.UpdateAllHierarchyPathsAsync(System.Threading.CancellationToken)">
            <summary>
            Met à jour les chemins hiérarchiques de toutes les catégories.
            </summary>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Nombre de catégories mises à jour.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetCategoriesAsTreeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Récupère les catégories organisées en arbre hiérarchique.
            </summary>
            <param name="includeInactive">Inclut les catégories inactives.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Catégories organisées en arbre.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetCategoryDescendantsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Récupère tous les descendants d'une catégorie.
            </summary>
            <param name="categoryId">Identifiant de la catégorie parent.</param>
            <param name="includeInactive">Inclut les catégories inactives.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des descendants.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.GetCategoryAncestorsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Récupère les ancêtres d'une catégorie (breadcrumb).
            </summary>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des ancêtres (du plus proche au plus éloigné).</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.WouldCreateCircularReferenceAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Vérifie s'il y aurait des références circulaires lors du changement de parent.
            </summary>
            <param name="categoryId">Identifiant de la catégorie.</param>
            <param name="newParentId">Identifiant du nouveau parent.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>True s'il y aurait une référence circulaire.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Abstractions.ICategoryStore.ReorderCategoriesAsync(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Réorganise l'ordre d'affichage des catégories.
            </summary>
            <param name="categoryOrders">Dictionnaire des ordres d'affichage par ID de catégorie.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Nombre de catégories mises à jour.</returns>
        </member>
        <member name="T:Watch.Manager.Service.Database.ArticleAnalyseStore">
            <summary>
                Provides storage and retrieval operations for analyzed articles, including search and thumbnail access.
            </summary>
            <param name="articlesContext">The database context used for accessing and managing article data.</param>
            <param name="searchable">The vector searchable interface used for performing vector-based searches on article data.</param>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.#ctor(Watch.Manager.Service.Database.Context.ArticlesContext,Microsoft.Extensions.VectorData.IVectorSearchable{Watch.Manager.Service.Database.Entities.ArticleSearchEntity})">
            <summary>
                Provides storage and retrieval operations for analyzed articles, including search and thumbnail access.
            </summary>
            <param name="articlesContext">The database context used for accessing and managing article data.</param>
            <param name="searchable">The vector searchable interface used for performing vector-based searches on article data.</param>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.StoreArticleAnalyzeAsync(Watch.Manager.Service.Database.Entities.Article,System.Threading.CancellationToken)">
            <summary>
                Stores an analyzed article asynchronously in the database.
            </summary>
            <param name="analyzeModel">The analyzed article model to store.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.IsArticleExistsAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Checks asynchronously if an article exists by its URL.
            </summary>
            <param name="url">The URL of the article to check.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that returns true if the article exists, otherwise false.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.SearchArticleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Searches for articles asynchronously based on search terms and/or tag.
            </summary>
            <param name="searchTerms">The search terms to filter articles, or null to ignore.</param>
            <param name="tag">The tag to filter articles, or null to ignore.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>An asynchronous stream of article result DTOs matching the criteria.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.GetAllTagsAsync(System.Threading.CancellationToken)">
            <summary>
                Retrieves all unique tags used in articles asynchronously.
            </summary>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that returns an array of all tags.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.ArticleAnalyseStore.GetThumbnailAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves the thumbnail image for a given article asynchronously.
            </summary>
            <param name="id">The unique identifier of the article.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>
                A value task that returns a tuple containing the thumbnail as a memory stream and the file name (if available).
            </returns>
        </member>
        <member name="T:Watch.Manager.Service.Database.CategoryStore">
            <summary>
            Implémentation du service de gestion des catégories.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.#ctor(Microsoft.Extensions.Logging.ILogger{Watch.Manager.Service.Database.CategoryStore},Watch.Manager.Service.Database.Context.ArticlesContext)">
            <summary>
            Implémentation du service de gestion des catégories.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetAllCategoriesAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetCategoryByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.CreateCategoryAsync(Watch.Manager.Service.Database.Entities.Category,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.UpdateCategoryAsync(Watch.Manager.Service.Database.Entities.Category,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.DeleteCategoryAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetRootCategoriesAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.CategoryExistsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.CategoryNameExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.AssignCategoryToArticleAsync(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.RemoveCategoryFromArticleAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetArticleCategoriesAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetArticleCountInCategoryAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetLinkedArticleTitlesAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetCategoryAndChildrenIdsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Récupère l'ID d'une catégorie et tous les IDs de ses sous-catégories de manière récursive.
            </summary>
            <param name="categoryId">ID de la catégorie parent.</param>
            <param name="cancellationToken">Token d'annulation.</param>
            <returns>Liste des IDs de catégories.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.UpdateAllHierarchyPathsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetCategoriesAsTreeAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetCategoryDescendantsAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.GetCategoryAncestorsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.WouldCreateCircularReferenceAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.CategoryStore.ReorderCategoriesAsync(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Context.ArticlesContext">
            <summary>
            Contexte Entity Framework pour la gestion des articles et catégories.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Context.ArticlesContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <inheritdoc />
        </member>
        <member name="P:Watch.Manager.Service.Database.Context.ArticlesContext.Articles">
            <summary>
            DbSet pour les articles.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Context.ArticlesContext.Categories">
            <summary>
            DbSet pour les catégories.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Context.ArticlesContext.ArticleCategories">
            <summary>
            DbSet pour les relations Article-Category.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Context.ArticlesContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Entities.Article">
            <summary>
                Représente un article analysé et stocké dans le système.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Id">
            <summary>
                Identifiant unique de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Title">
            <summary>
                Titre de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Tags">
            <summary>
                Tags associés à l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Authors">
            <summary>
                Auteurs de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Summary">
            <summary>
                Résumé de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Url">
            <summary>
                URL de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.AnalyzeDate">
            <summary>
                Date d'analyse de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.EmbeddingHead">
            <summary>
                Embedding vectoriel de l'en-tête de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.EmbeddingBody">
            <summary>
                Embedding vectoriel du corps de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.Thumbnail">
            <summary>
                URL de la miniature de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.ThumbnailBase64">
            <summary>
                Miniature de l'article encodée en base64.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Article.ArticleCategories">
            <summary>
                Catégories associées à cet article.
            </summary>
        </member>
        <member name="T:Watch.Manager.Service.Database.Entities.ArticleCategory">
            <summary>
            Représente la relation many-to-many entre Article et Category.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.ArticleId">
            <summary>
            Identifiant de l'article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.Article">
            <summary>
            Article associé.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.CategoryId">
            <summary>
            Identifiant de la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.Category">
            <summary>
            Catégorie associée.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.ConfidenceScore">
            <summary>
            Score de confiance de la classification (pour les classifications automatiques).
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.IsManual">
            <summary>
            Indique si la classification a été faite manuellement ou automatiquement.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleCategory.AssignedAt">
            <summary>
            Date d'assignation de la catégorie à l'article.
            </summary>
        </member>
        <member name="T:Watch.Manager.Service.Database.Entities.ArticleSearchEntity">
            <summary>
                Represents an article entity used for search and vector storage operations.
            </summary>
        </member>
        <member name="F:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.VectorDimensions">
            <summary>
                Represents the fixed number of dimensions for a vector.
            </summary>
            <remarks>
                This constant defines the dimensionality of vectors used in the application.
                It is set to 1536, indicating that all vectors are 1536-dimensional.
            </remarks>
        </member>
        <member name="F:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.VectorDistanceFunction">
            <summary>
                Represents the distance function used for vector calculations.
            </summary>
            <remarks>
                This constant specifies the use of the cosine distance function for vector distance
                calculations. It is intended to be used in scenarios where cosine similarity or distance is required.
            </remarks>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Id">
            <summary>
                Gets or sets the unique identifier for the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Title">
            <summary>
                Gets or sets the title of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Tags">
            <summary>
                Gets or sets the tags associated with the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Authors">
            <summary>
                Gets or sets the authors of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Summary">
            <summary>
                Gets or sets the summary of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Url">
            <summary>
                Gets or sets the URL of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.AnalyzeDate">
            <summary>
                Gets or sets the date when the article was analyzed.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.EmbeddingHead">
            <summary>
                Gets or sets the vector embedding representing the head (main content) of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.EmbeddingBody">
            <summary>
                Gets or sets the vector embedding representing the body of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.Thumbnail">
            <summary>
                Gets or sets the thumbnail image URL for the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.ArticleSearchEntity.ThumbnailBase64">
            <summary>
                Gets or sets the base64-encoded thumbnail image for the article.
            </summary>
        </member>
        <member name="T:Watch.Manager.Service.Database.Entities.Category">
            <summary>
            Représente une catégorie pour organiser les articles.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Id">
            <summary>
            Identifiant unique de la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Name">
            <summary>
            Nom de la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Description">
            <summary>
            Description détaillée de la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Color">
            <summary>
            Couleur associée à la catégorie (format hex).
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Icon">
            <summary>
            Icône associée à la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Keywords">
            <summary>
            Mots-clés pour la classification automatique.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.ParentId">
            <summary>
            Identifiant de la catégorie parente (pour la hiérarchie).
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Parent">
            <summary>
            Catégorie parente.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Children">
            <summary>
            Sous-catégories.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.ArticleCategories">
            <summary>
            Articles associés à cette catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.CreatedAt">
            <summary>
            Date de création de la catégorie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.UpdatedAt">
            <summary>
            Date de dernière modification.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.IsActive">
            <summary>
            Indique si la catégorie est active.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.ConfidenceThreshold">
            <summary>
            Score de confiance pour la classification automatique.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.Embedding">
            <summary>
            Embedding vectoriel de la catégorie pour la classification sémantique.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.AutoThreshold">
            <summary>
            Seuil automatique pour la classification.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.ManualThreshold">
            <summary>
            Seuil manuel pour la classification.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.InheritFromParent">
            <summary>
            Indique si cette catégorie hérite des propriétés de son parent.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.DisplayOrder">
            <summary>
            Ordre d'affichage dans la hiérarchie.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.HierarchyPath">
            <summary>
            Chemin complet dans la hiérarchie (ex: "Parent/Enfant/Sous-enfant").
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Entities.Category.HierarchyLevel">
            <summary>
            Niveau de profondeur dans la hiérarchie (0 = racine).
            </summary>
        </member>
        <member name="T:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions">
            <summary>
            Extensions pour la gestion de la hiérarchie des catégories.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.CalculateHierarchyPath(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Calcule le chemin hiérarchique complet d'une catégorie.
            </summary>
            <param name="category">La catégorie.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Le chemin hiérarchique (ex: "Parent/Enfant/Sous-enfant").</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.CalculateHierarchyLevel(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Calcule le niveau de profondeur dans la hiérarchie.
            </summary>
            <param name="category">La catégorie.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Le niveau de profondeur (0 = racine).</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.GetAncestors(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Obtient tous les ancêtres d'une catégorie.
            </summary>
            <param name="category">La catégorie.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Liste des catégories ancêtres (du plus proche au plus éloigné).</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.GetAllDescendants(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Obtient tous les descendants d'une catégorie de manière récursive.
            </summary>
            <param name="category">La catégorie parent.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Liste de tous les descendants.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.IsAncestorOf(Watch.Manager.Service.Database.Entities.Category,Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Vérifie si une catégorie est un ancêtre d'une autre catégorie.
            </summary>
            <param name="potentialAncestor">La catégorie potentiellement ancêtre.</param>
            <param name="category">La catégorie à vérifier.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>True si potentialAncestor est un ancêtre de category.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.GetEffectiveKeywords(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Obtient les mots-clés effectifs d'une catégorie (incluant l'héritage).
            </summary>
            <param name="category">La catégorie.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Liste des mots-clés effectifs.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.GetEffectiveConfidenceThreshold(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Obtient le seuil de confiance effectif d'une catégorie (incluant l'héritage).
            </summary>
            <param name="category">La catégorie.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
            <returns>Le seuil de confiance effectif.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.UpdateDescendantsHierarchyPaths(Watch.Manager.Service.Database.Entities.Category,System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Met à jour les chemins hiérarchiques de tous les descendants d'une catégorie.
            </summary>
            <param name="category">La catégorie parent.</param>
            <param name="allCategories">Toutes les catégories disponibles.</param>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.CategoryHierarchyExtensions.ToHierarchicalTree(System.Collections.Generic.IEnumerable{Watch.Manager.Service.Database.Entities.Category})">
            <summary>
            Obtient une représentation en arbre hiérarchique des catégories.
            </summary>
            <param name="categories">Les catégories à organiser.</param>
            <returns>Les catégories racines avec leurs enfants organisés en arbre.</returns>
        </member>
        <member name="T:Watch.Manager.Service.Database.Extensions.DatabaseExtensions">
            <summary>
                Provides extension methods for registering database-related services in the application.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Database.Extensions.DatabaseExtensions.AddDatabaseServices(Microsoft.Extensions.Hosting.IHostApplicationBuilder)">
            <summary>
                Registers database services, DbContext, and vector store components with the application's dependency injection container.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationBuilder" /> used to configure the application.</param>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the required connection string 'articlesdb' is not configured.
            </exception>
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.InitDatabase">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.InitDatabase.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.InitDatabase.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.InitDatabase.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.AddThumbnail">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddThumbnail.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddThumbnail.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddThumbnail.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.ThumbnailBase64">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.ThumbnailBase64.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.ThumbnailBase64.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.ThumbnailBase64.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.AddCategoriesSupport">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoriesSupport.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoriesSupport.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoriesSupport.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.AddAutoclassification">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddAutoclassification.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddAutoclassification.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddAutoclassification.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.UpdateStringLength">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.UpdateStringLength.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.UpdateStringLength.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.UpdateStringLength.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Migrations.AddCategoryHierarchyEnhancements">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoryHierarchyEnhancements.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoryHierarchyEnhancements.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Watch.Manager.Service.Database.Migrations.AddCategoryHierarchyEnhancements.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Watch.Manager.Service.Database.Models.ArticleResultDto">
            <summary>
            Data Transfer Object representing the result of an article analysis.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Id">
            <summary>
            Gets or sets the unique identifier of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Title">
            <summary>
            Gets or sets the title of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Tags">
            <summary>
            Gets or sets the tags associated with the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Authors">
            <summary>
            Gets or sets the authors of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Summary">
            <summary>
            Gets or sets the summary of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Url">
            <summary>
            Gets or sets the URL of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.AnalyzeDate">
            <summary>
            Gets or sets the date when the article was analyzed.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Thumbnail">
            <summary>
            Gets or sets the thumbnail image URL of the article.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Score">
            <summary>
            Gets or sets the score assigned to the article, if any.
            </summary>
        </member>
        <member name="P:Watch.Manager.Service.Database.Models.ArticleResultDto.Categories">
            <summary>
            Gets or sets the categories assigned to this article.
            </summary>
        </member>
    </members>
</doc>
