<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Watch.Manager.Service.Migrations</name>
    </assembly>
    <members>
        <member name="T:Watch.Manager.Service.Migrations.Worker">
            <summary>
                Background service responsible for ensuring the database exists, running migrations, and seeding initial data.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.#ctor(System.IServiceProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
                Background service responsible for ensuring the database exists, running migrations, and seeding initial data.
            </summary>
        </member>
        <member name="F:Watch.Manager.Service.Migrations.Worker.ActivitySourceName">
            <summary>
                The name of the activity source for diagnostics.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                Executes the background service logic: ensures the database exists, applies migrations, and seeds data.
            </summary>
            <param name="cancellationToken">Token to signal cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.EnsureDatabaseAsync(Watch.Manager.Service.Database.Context.ArticlesContext,System.Threading.CancellationToken)">
            <summary>
                Ensures the database exists by creating it if it does not.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="cancellationToken">Token to signal cancellation.</param>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.RunMigrationAsync(Watch.Manager.Service.Database.Context.ArticlesContext,System.Threading.CancellationToken)">
            <summary>
                Applies any pending migrations to the database.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="cancellationToken">Token to signal cancellation.</param>
        </member>
    </members>
</doc>
