<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Watch.Manager.Service.Migrations</name>
    </assembly>
    <members>
        <member name="T:Program">
            <summary>
            Auto-generated public partial Program class for top-level statement apps.
            </summary>
        </member>
        <member name="T:Watch.Manager.Service.Migrations.Worker">
            <summary>
                Background service responsible for ensuring the database exists, running migrations, and seeding initial data.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.#ctor(System.IServiceProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
                Background service responsible for ensuring the database exists, running migrations, and seeding initial data.
            </summary>
        </member>
        <member name="F:Watch.Manager.Service.Migrations.Worker.ActivitySourceName">
            <summary>
                The name of the activity source for diagnostics.
            </summary>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                Executes the background service logic: ensures the database exists, applies migrations, and seeds data.
            </summary>
            <param name="cancellationToken">Token to signal cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.EnsureDatabaseAsync(Watch.Manager.Service.Database.Context.ArticlesContext,System.Threading.CancellationToken)">
            <summary>
                Ensures the database exists by creating it if it does not.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="cancellationToken">Token to signal cancellation.</param>
        </member>
        <member name="M:Watch.Manager.Service.Migrations.Worker.RunMigrationAsync(Watch.Manager.Service.Database.Context.ArticlesContext,System.Threading.CancellationToken)">
            <summary>
                Applies any pending migrations to the database.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="cancellationToken">Token to signal cancellation.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.CreateDocumentationId(System.Type)">
            <summary>
            Generates a documentation comment ID for a type.
            Example: T:Namespace.Outer+Inner`1 becomes T:Namespace.Outer.Inner`1
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.CreateDocumentationId(System.Reflection.PropertyInfo)">
            <summary>
            Generates a documentation comment ID for a property.
            Example: P:Namespace.ContainingType.PropertyName or for an indexer P:Namespace.ContainingType.Item(System.Int32)
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.CreateDocumentationId(System.Type,System.String)">
            <summary>
            Generates a documentation comment ID for a property given its container type and property name.
            Example: P:Namespace.ContainingType.PropertyName
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.CreateDocumentationId(System.Reflection.MethodInfo)">
            <summary>
            Generates a documentation comment ID for a method (or constructor).
            For example:
              M:Namespace.ContainingType.MethodName(ParamType1,ParamType2)~ReturnType
              M:Namespace.ContainingType.#ctor(ParamType)
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.GetTypeDocId(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Generates a documentation ID string for a type.
            This method handles nested types (replacing '+' with '.'),
            generic types, arrays, pointers, by-ref types, and generic parameters.
            The <paramref name="includeGenericArguments"/> flag controls whether
            constructed generic type arguments are emitted, while <paramref name="omitGenericArity"/>
            controls whether the generic arity marker (e.g. "`1") is appended.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OpenApi.Generated.DocumentationCommentIdHelper.NormalizeDocId(System.String)">
            <summary>
            Normalizes a documentation comment ID to match the compiler-style format.
            Strips the return type suffix for ordinary methods but retains it for conversion operators.
            </summary>
            <param name="docId">The documentation comment ID to normalize.</param>
            <returns>The normalized documentation comment ID.</returns>
        </member>
    </members>
</doc>
